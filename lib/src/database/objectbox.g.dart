// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../../src/database/model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
      id: const obx_int.IdUid(2, 7500374954732282090),
      name: 'DataMessage',
      lastPropertyId: const obx_int.IdUid(15, 3882290172258990645),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 1545068481723978007),
            name: 'topic',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(3, 5629718895506784170),
            name: 'from',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(4, 6244017526639838738),
            name: 'ts',
            type: 10,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(5, 3343702600643972194),
            name: 'seq',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(6, 8497395922862948872),
            name: 'noForwarding',
            type: 1,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(7, 1361745614401308380),
            name: 'hi',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(8, 6768784378071748402),
            name: 'mark',
            type: 6,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(9, 8080767349429141016),
            name: 'dbHead',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(10, 4732332771195243480),
            name: 'dbContent',
            type: 9,
            flags: 0),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(12, 2676264290457955547),
            name: 'combinedId',
            type: 9,
            flags: 2080,
            indexId: const obx_int.IdUid(3, 6669793052934164781)),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(14, 6562255994424126639),
            name: 'localTopicId',
            type: 11,
            flags: 520,
            indexId: const obx_int.IdUid(5, 5365880262889030653),
            relationTarget: 'LocalTopic'),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(15, 3882290172258990645),
            name: 'id',
            type: 6,
            flags: 129)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[]),
  obx_int.ModelEntity(
      id: const obx_int.IdUid(7, 7523939529630017019),
      name: 'LocalTopic',
      lastPropertyId: const obx_int.IdUid(2, 4984847510489244727),
      flags: 0,
      properties: <obx_int.ModelProperty>[
        obx_int.ModelProperty(
            id: const obx_int.IdUid(1, 1480729267301426515),
            name: 'id',
            type: 6,
            flags: 1),
        obx_int.ModelProperty(
            id: const obx_int.IdUid(2, 4984847510489244727),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <obx_int.ModelRelation>[],
      backlinks: <obx_int.ModelBacklink>[
        obx_int.ModelBacklink(
            name: 'messages', srcEntity: 'DataMessage', srcField: 'localTopic')
      ])
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
Future<obx.Store> openStore(
    {String? directory,
    int? maxDBSizeInKB,
    int? maxDataSizeInKB,
    int? fileMode,
    int? maxReaders,
    bool queriesCaseSensitiveDefault = true,
    String? macosApplicationGroup}) async {
  await loadObjectBoxLibraryAndroidCompat();
  return obx.Store(getObjectBoxModel(),
      directory: directory ?? (await defaultStoreDirectory()).path,
      maxDBSizeInKB: maxDBSizeInKB,
      maxDataSizeInKB: maxDataSizeInKB,
      fileMode: fileMode,
      maxReaders: maxReaders,
      queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
      macosApplicationGroup: macosApplicationGroup);
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
      entities: _entities,
      lastEntityId: const obx_int.IdUid(7, 7523939529630017019),
      lastIndexId: const obx_int.IdUid(5, 5365880262889030653),
      lastRelationId: const obx_int.IdUid(0, 0),
      lastSequenceId: const obx_int.IdUid(0, 0),
      retiredEntityUids: const [
        7595507953879236273,
        5825008752108115567,
        4669327825780138909,
        1418740078404418352,
        1986949763417790528
      ],
      retiredIndexUids: const [3734032233424004645, 4524952478530561359],
      retiredPropertyUids: const [
        8401172950085984679,
        6653102471760011849,
        7139542189916757959,
        5632662201352881675,
        8491904116446346437,
        8551816917586839958,
        5860732589279765184,
        8787319704378319453,
        480838723607652497,
        1614294361819380032,
        9113196365372014521,
        2273434555358412392,
        8514496487745646617,
        1766405141132696244,
        5442303229141186181,
        645643751041858705
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, obx_int.EntityDefinition>{
    DataMessage: obx_int.EntityDefinition<DataMessage>(
        model: _entities[0],
        toOneRelations: (DataMessage object) => [object.localTopic],
        toManyRelations: (DataMessage object) => {},
        getId: (DataMessage object) => object.id,
        setId: (DataMessage object, int id) {
          object.id = id;
        },
        objectToFB: (DataMessage object, fb.Builder fbb) {
          final topicOffset =
              object.topic == null ? null : fbb.writeString(object.topic!);
          final fromOffset =
              object.from == null ? null : fbb.writeString(object.from!);
          final dbHeadOffset =
              object.dbHead == null ? null : fbb.writeString(object.dbHead!);
          final dbContentOffset = object.dbContent == null
              ? null
              : fbb.writeString(object.dbContent!);
          final combinedIdOffset = object.combinedId == null
              ? null
              : fbb.writeString(object.combinedId!);
          fbb.startTable(16);
          fbb.addOffset(1, topicOffset);
          fbb.addOffset(2, fromOffset);
          fbb.addInt64(3, object.ts?.millisecondsSinceEpoch);
          fbb.addInt64(4, object.seq);
          fbb.addBool(5, object.noForwarding);
          fbb.addInt64(6, object.hi);
          fbb.addInt64(7, object.mark);
          fbb.addOffset(8, dbHeadOffset);
          fbb.addOffset(9, dbContentOffset);
          fbb.addOffset(11, combinedIdOffset);
          fbb.addInt64(13, object.localTopic.targetId);
          fbb.addInt64(14, object.id);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final tsValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 10);
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0);
          final topicParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 6);
          final fromParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 8);
          final tsParam = tsValue == null
              ? null
              : DateTime.fromMillisecondsSinceEpoch(tsValue);
          final seqParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 12);
          final noForwardingParam =
              const fb.BoolReader().vTableGetNullable(buffer, rootOffset, 14);
          final hiParam =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16);
          final combinedIdParam = const fb.StringReader(asciiOptimization: true)
              .vTableGetNullable(buffer, rootOffset, 26);
          final object = DataMessage(
              id: idParam,
              topic: topicParam,
              from: fromParam,
              ts: tsParam,
              seq: seqParam,
              noForwarding: noForwardingParam,
              hi: hiParam,
              combinedId: combinedIdParam)
            ..mark = const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)
            ..dbHead = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 20)
            ..dbContent = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 22);
          object.localTopic.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 30, 0);
          object.localTopic.attach(store);
          return object;
        }),
    LocalTopic: obx_int.EntityDefinition<LocalTopic>(
        model: _entities[1],
        toOneRelations: (LocalTopic object) => [],
        toManyRelations: (LocalTopic object) => {
              obx_int.RelInfo<DataMessage>.toOneBacklink(14, object.id,
                      (DataMessage srcObject) => srcObject.localTopic):
                  object.messages
            },
        getId: (LocalTopic object) => object.id,
        setId: (LocalTopic object, int id) {
          object.id = id;
        },
        objectToFB: (LocalTopic object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (obx.Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final nameParam = const fb.StringReader(asciiOptimization: true)
              .vTableGet(buffer, rootOffset, 6, '');
          final idParam =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
          final object = LocalTopic(nameParam, id: idParam);
          obx_int.InternalToManyAccess.setRelInfo<LocalTopic>(
              object.messages,
              store,
              obx_int.RelInfo<DataMessage>.toOneBacklink(14, object.id,
                  (DataMessage srcObject) => srcObject.localTopic));
          return object;
        })
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [DataMessage] entity fields to define ObjectBox queries.
class DataMessage_ {
  /// See [DataMessage.topic].
  static final topic =
      obx.QueryStringProperty<DataMessage>(_entities[0].properties[0]);

  /// See [DataMessage.from].
  static final from =
      obx.QueryStringProperty<DataMessage>(_entities[0].properties[1]);

  /// See [DataMessage.ts].
  static final ts =
      obx.QueryDateProperty<DataMessage>(_entities[0].properties[2]);

  /// See [DataMessage.seq].
  static final seq =
      obx.QueryIntegerProperty<DataMessage>(_entities[0].properties[3]);

  /// See [DataMessage.noForwarding].
  static final noForwarding =
      obx.QueryBooleanProperty<DataMessage>(_entities[0].properties[4]);

  /// See [DataMessage.hi].
  static final hi =
      obx.QueryIntegerProperty<DataMessage>(_entities[0].properties[5]);

  /// See [DataMessage.mark].
  static final mark =
      obx.QueryIntegerProperty<DataMessage>(_entities[0].properties[6]);

  /// See [DataMessage.dbHead].
  static final dbHead =
      obx.QueryStringProperty<DataMessage>(_entities[0].properties[7]);

  /// See [DataMessage.dbContent].
  static final dbContent =
      obx.QueryStringProperty<DataMessage>(_entities[0].properties[8]);

  /// See [DataMessage.combinedId].
  static final combinedId =
      obx.QueryStringProperty<DataMessage>(_entities[0].properties[9]);

  /// See [DataMessage.localTopic].
  static final localTopic = obx.QueryRelationToOne<DataMessage, LocalTopic>(
      _entities[0].properties[10]);

  /// See [DataMessage.id].
  static final id =
      obx.QueryIntegerProperty<DataMessage>(_entities[0].properties[11]);
}

/// [LocalTopic] entity fields to define ObjectBox queries.
class LocalTopic_ {
  /// See [LocalTopic.id].
  static final id =
      obx.QueryIntegerProperty<LocalTopic>(_entities[1].properties[0]);

  /// See [LocalTopic.name].
  static final name =
      obx.QueryStringProperty<LocalTopic>(_entities[1].properties[1]);

  /// see [LocalTopic.messages]
  static final messages =
      obx.QueryBacklinkToMany<DataMessage, LocalTopic>(DataMessage_.localTopic);
}
